{"version":3,"sources":["components/knnresults.js","components/essentials.js"],"names":["medFilter","feature","properties","priority","othersFilter","getDistance","p1","p2","phi1","Math","PI","phi2","dLambda","d","acos","sin","cos","Number","toFixed","KnnResults","userLocation","userState","useState","geoData","setGeoData","results","setResults","categories","setCategories","useEffectOnce","getJSON","useCallback","axios","get","then","response","data","catch","error","console","log","useEffect","medKnn","restKnn","panKnn","Knn","L","geoJSON","filter","nearestLayer","features","feat","state","includes","result","name","type","i","length","push","geometry","coordinates","layer","desc","addr","phone","contact","icon","recordid","dist","reverse","j","k","map","reduce","acc","e","set","Map","forEach","value","key","categoryMeta","count","isSelected","className","style","animationDelay","Object","keys","categoryName","variant","classnames","onClick","newIsSelected","produce","draft","toggleFilter","href","target","split","EssentialsLoader","useMeasure","svgElement","width","Fragment","ref","speed","height","viewBox","position","x","y","rx","ry","Essentials","props","currentLocation","setCurrentLocation","currentAddress","setCurrentAddress","currentState","setCurrentState","getCurrentAddress","lat","lng","locality","principalSubdivision","err","src","alt","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","size"],"mappings":"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","file":"static/js/Essentials.5f3fe121.chunk.js","sourcesContent":["import {Label, LabelGroup, CounterLabel} from '@primer/components';\r\nimport axios from 'axios';\r\nimport classnames from 'classnames';\r\nimport produce from 'immer';\r\nimport L from 'leaflet';\r\nimport * as Knn from 'leaflet-knn';\r\nimport React, {useState, useEffect, useCallback} from 'react';\r\nimport {ExternalLink, Phone} from 'react-feather';\r\nimport {useEffectOnce} from 'react-use';\r\n\r\nfunction medFilter(feature) {\r\n  return feature.properties.priority;\r\n}\r\n\r\nfunction othersFilter(feature) {\r\n  return !feature.properties.priority;\r\n}\r\n\r\nfunction getDistance(p1, p2) {\r\n  // p1 and p2 => [lat1, long1], [lat2, long2]\r\n  const phi1 = (p1[0] * Math.PI) / 180;\r\n  const phi2 = (p2[0] * Math.PI) / 180;\r\n  const dLambda = ((p2[1] - p1[1]) * Math.PI) / 180;\r\n  const R = 6371e3;\r\n  const d =\r\n    Math.acos(\r\n      Math.sin(phi1) * Math.sin(phi2) +\r\n        Math.cos(phi1) * Math.cos(phi2) * Math.cos(dLambda)\r\n    ) * R;\r\n  return Number((d / 1000).toFixed(2));\r\n}\r\n\r\nfunction KnnResults({userLocation, userState}) {\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [results, setResults] = useState();\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffectOnce(() => {\r\n    getJSON();\r\n  }, []);\r\n\r\n  const getJSON = useCallback(() => {\r\n    axios\r\n      .get('https://api.covid19india.org/resources/geoResources.json')\r\n      .then((response) => {\r\n        setGeoData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let medKnn;\r\n    let restKnn;\r\n    let panKnn;\r\n\r\n    const hK = 5; // K nearest hospitals/labs wrt user location\r\n    const rK = 100; // K nearest essentials wrt user location\r\n    const rad = 10 * 1000; // Max distance of the K points, in meters ; aim to be  ~(avg city radius)\r\n\r\n    if (userLocation) {\r\n      medKnn = new Knn(L.geoJSON(geoData, {filter: medFilter})).nearestLayer(\r\n        [userLocation[1], userLocation[0]],\r\n        hK\r\n      );\r\n      restKnn = new Knn(\r\n        L.geoJSON(geoData, {filter: othersFilter})\r\n      ).nearestLayer([userLocation[1], userLocation[0]], rK, rad);\r\n      panKnn = geoData?.features?.filter(\r\n        (feat) =>\r\n          feat.properties.state === 'PAN India' ||\r\n          (feat.properties.state.includes('PAN') &&\r\n            feat.properties.state.includes(userState))\r\n      );\r\n    }\r\n\r\n    const result = {\r\n      name: 'NearestK-Essentials',\r\n      type: 'FeatureCollection',\r\n      features: [],\r\n    };\r\n\r\n    if (medKnn) {\r\n      let i = 0;\r\n      for (i = 0; i < medKnn.length; i++) {\r\n        result.features.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: medKnn[i].layer.feature.geometry.coordinates,\r\n          },\r\n          properties: {\r\n            name: medKnn[i].layer.feature.properties.name,\r\n            desc: medKnn[i].layer.feature.properties.desc,\r\n            addr: medKnn[i].layer.feature.properties.addr,\r\n            phone: medKnn[i].layer.feature.properties.phone,\r\n            contact: medKnn[i].layer.feature.properties.contact,\r\n            icon: medKnn[i].layer.feature.properties.icon,\r\n            recordid: medKnn[i].layer.feature.properties.recordid,\r\n            dist: getDistance(\r\n              userLocation,\r\n              medKnn[i].layer.feature.geometry.coordinates.reverse()\r\n            ),\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    if (restKnn) {\r\n      let j = 0;\r\n      for (j = 0; j < restKnn.length; j++) {\r\n        result.features.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: restKnn[j].layer.feature.geometry.coordinates,\r\n          },\r\n          properties: {\r\n            name: restKnn[j].layer.feature.properties.name,\r\n            desc: restKnn[j].layer.feature.properties.desc,\r\n            addr: restKnn[j].layer.feature.properties.addr,\r\n            phone: restKnn[j].layer.feature.properties.phone,\r\n            contact: restKnn[j].layer.feature.properties.contact,\r\n            icon: restKnn[j].layer.feature.properties.icon,\r\n            recordid: restKnn[j].layer.feature.properties.recordid,\r\n            dist: getDistance(\r\n              userLocation,\r\n              restKnn[j].layer.feature.geometry.coordinates.reverse()\r\n            ),\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    if (panKnn) {\r\n      let k = 0;\r\n      for (k = 0; k < panKnn.length; k++) {\r\n        result.features.push(panKnn[k]);\r\n      }\r\n    }\r\n\r\n    setResults(result);\r\n  }, [geoData, userLocation, userState]);\r\n\r\n  const toggleFilter = (categoryName, newIsSelected) => {\r\n    setCategories(\r\n      produce((draft) => {\r\n        draft[categoryName].isSelected = newIsSelected;\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const categories = {};\r\n    if (results) {\r\n      results.features\r\n        .map(function (feature) {\r\n          return feature?.properties?.icon;\r\n        })\r\n        .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map())\r\n        .forEach((value, key, map) => {\r\n          const categoryMeta = {count: value, isSelected: true};\r\n          categories[key] = categoryMeta;\r\n        });\r\n    }\r\n    setCategories(categories);\r\n  }, [results]);\r\n\r\n  if (results)\r\n    return (\r\n      <div className=\"results fadeInUp\" style={{animationDelay: '0.5s'}}>\r\n        <div className=\"labels\">\r\n          <LabelGroup>\r\n            {Object.keys(categories).map((categoryName) => (\r\n              <Label\r\n                variant=\"xl\"\r\n                key={categoryName}\r\n                className={classnames('label-item', {\r\n                  'is-selected': categories[categoryName].isSelected,\r\n                })}\r\n                onClick={() =>\r\n                  toggleFilter(\r\n                    categoryName,\r\n                    !categories[categoryName].isSelected\r\n                  )\r\n                }\r\n              >\r\n                {categoryName}\r\n                <CounterLabel className=\"counter\">\r\n                  {categories[categoryName].count}\r\n                </CounterLabel>\r\n              </Label>\r\n            ))}\r\n          </LabelGroup>\r\n        </div>\r\n\r\n        {results?.features\r\n          .filter((feature) => {\r\n            return (\r\n              Object.keys(categories)\r\n                .filter(\r\n                  (categoryName) => categories[categoryName].isSelected === true\r\n                )\r\n                .includes(feature.properties.icon) && feature.properties.dist\r\n            );\r\n          })\r\n          .map((result, i) => (\r\n            <div\r\n              key={result.properties.recordid ? result.properties.recordid : i}\r\n              className=\"essential-result\"\r\n            >\r\n              <div className=\"result-top\">\r\n                <div className=\"result-top-left\">\r\n                  <div className=\"result-name\">{result.properties.name}</div>\r\n                  <div className=\"result-location\">\r\n                    {result.properties.addr}\r\n                  </div>\r\n                  {result.properties.dist && (\r\n                    <div className=\"result-distance\">\r\n                      {result.properties.dist + ' km away'}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <a\r\n                  className=\"result-category\"\r\n                  href={result.properties.contact}\r\n                  target=\"_noblank\"\r\n                >\r\n                  <span>{result.properties.icon}</span>\r\n                  <ExternalLink />\r\n                </a>\r\n              </div>\r\n              <div className=\"result-description\">{result.properties.desc}</div>\r\n              <div className=\"result-contacts\">\r\n                {result.properties.phone.split('\\n').map((contact) => (\r\n                  <div key={contact} className=\"result-contact\">\r\n                    <Phone />\r\n                    <a href={`tel:${contact}`}>{contact}</a>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n        <div>\r\n          <h3 className=\"pan-divider\">{`Throughout ${userState} and India`}</h3>\r\n        </div>\r\n\r\n        {results?.features\r\n          .filter((feature) => {\r\n            return (\r\n              Object.keys(categories)\r\n                .filter(\r\n                  (categoryName) => categories[categoryName].isSelected === true\r\n                )\r\n                .includes(feature.properties.icon) && !feature.properties.dist\r\n            );\r\n          })\r\n          .map((result, i) => (\r\n            <div\r\n              key={result.properties.recordid ? result.properties.recordid : i}\r\n              className=\"essential-result\"\r\n            >\r\n              <div className=\"result-top\">\r\n                <div className=\"result-top-left\">\r\n                  <div className=\"result-name\">{result.properties.name}</div>\r\n                  <div className=\"result-location\">\r\n                    {result.properties.addr}\r\n                  </div>\r\n                  {result.properties.dist && (\r\n                    <div className=\"result-distance\">\r\n                      {result.properties.dist + ' km away'}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <a\r\n                  className=\"result-category\"\r\n                  href={result.properties.contact}\r\n                  target=\"_noblank\"\r\n                >\r\n                  <span>{result.properties.icon}</span>\r\n                  <ExternalLink />\r\n                </a>\r\n              </div>\r\n              <div className=\"result-description\">{result.properties.desc}</div>\r\n              <div className=\"result-contacts\">\r\n                {result.properties.phone.split('\\n').map((contact) => (\r\n                  <div key={contact} className=\"result-contact\">\r\n                    <Phone />\r\n                    <a href={`tel:${contact}`}>{contact}</a>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nexport default KnnResults;\r\n","import KnnResults from './knnresults';\r\n\r\nimport axios from 'axios';\r\nimport React, {useState, useEffect} from 'react';\r\nimport ContentLoader from 'react-content-loader';\r\nimport * as Icon from 'react-feather';\r\nimport {useMeasure} from 'react-use';\r\n\r\nfunction EssentialsLoader() {\r\n  const [svgElement, {width}] = useMeasure();\r\n\r\n  useEffect(() => {}, [width]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <span ref={svgElement} style={{width: '100%'}} />\r\n      {width && (\r\n        <ContentLoader\r\n          speed={1.5}\r\n          width={width}\r\n          height={325}\r\n          viewBox={`0 0 ${width} 325`}\r\n          position=\"absolute\"\r\n          className=\"fadeInUp\"\r\n        >\r\n          <rect\r\n            x={width / 2 - 60}\r\n            y=\"10\"\r\n            rx=\"5\"\r\n            ry=\"5\"\r\n            width=\"120\"\r\n            height=\"32\"\r\n          />\r\n          <rect\r\n            x={width / 2 + 70}\r\n            y=\"18\"\r\n            rx=\"100\"\r\n            ry=\"100\"\r\n            width=\"15\"\r\n            height=\"15\"\r\n          />\r\n          <rect x=\"10\" y=\"80\" rx=\"5\" ry=\"5\" width=\"85\" height=\"32\" />\r\n          <rect x=\"100\" y=\"80\" rx=\"5\" ry=\"5\" width=\"65\" height=\"32\" />\r\n          <rect x=\"10\" y=\"130\" rx=\"5\" ry=\"5\" width={width - 20} height=\"172\" />\r\n        </ContentLoader>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst Essentials = (props) => {\r\n  const [currentLocation, setCurrentLocation] = useState(null);\r\n  const [currentAddress, setCurrentAddress] = useState(null);\r\n  const [currentState, setCurrentState] = useState(null);\r\n\r\n  const getLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setCurrentLocation([position.coords.latitude, position.coords.longitude]);\r\n      getCurrentAddress(position.coords.latitude, position.coords.longitude);\r\n    });\r\n  };\r\n\r\n  const getCurrentAddress = (lat, lng) => {\r\n    try {\r\n      axios\r\n        .get(\r\n          'https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=' +\r\n            lat +\r\n            '&longitude=' +\r\n            lng +\r\n            '&localityLanguage=en'\r\n        )\r\n        .then((response) => {\r\n          setCurrentAddress(response.data.locality);\r\n          setCurrentState(response.data.principalSubdivision);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n      setCurrentAddress('Error fetching name of your location');\r\n      setCurrentState(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Essentials\">\r\n      <img\r\n        src=\"/essentials_1.svg\"\r\n        alt=\"essentials platform\"\r\n        className=\"fadeInUp\"\r\n        style={{animationDelay: '0.3s'}}\r\n      />\r\n      <img\r\n        src=\"/essentials_2.svg\"\r\n        alt=\"essentials woman pushing cart\"\r\n        className=\"fadeInUp\"\r\n        style={{position: 'absolute', animationDelay: '0.1s'}}\r\n      />\r\n\r\n      {!currentLocation && (\r\n        <React.Fragment>\r\n          <button\r\n            className=\"button fadeInUp\"\r\n            style={{animationDelay: '0.6s'}}\r\n            onClick={() => getLocation()}\r\n          >\r\n            <span>View Nearby Essentials</span>\r\n            <Icon.Compass size={16} />\r\n          </button>\r\n          <div className=\"alert fadeInUp\" style={{animationDelay: '0.7s'}}>\r\n            <Icon.AlertOctagon size={16} />\r\n            <div className=\"alert-right is-full\">\r\n              {`We do not collect any location data; they're all stored \r\n              inside your browser and are inaccessible to us.`}\r\n            </div>\r\n          </div>\r\n          <div className=\"alert fadeInUp\" style={{animationDelay: '0.8s'}}>\r\n            <Icon.AlertOctagon size={16} />\r\n            <div className=\"alert-right is-full\">\r\n              {`We are a community sourced listing platform and are not associated\r\n              with any of the organizations listed below. Although we verify all\r\n              our listings, we request you to follow all the guidelines and take\r\n              the necessary precautions. We encourage you to report any error or\r\n              suspicious activity so that we can take immediate action.`}\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {currentLocation && !currentAddress && <EssentialsLoader />}\r\n\r\n      {currentAddress && (\r\n        <div className=\"address fadeInUp\">\r\n          <h3>{currentAddress + ', ' + currentState}</h3>\r\n\r\n          <Icon.XCircle\r\n            size={16}\r\n            onClick={() => {\r\n              setCurrentLocation(null);\r\n              setCurrentAddress(null);\r\n              setCurrentState(null);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"Search\">\r\n        {currentAddress && (\r\n          <KnnResults userLocation={currentLocation} userState={currentState} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Essentials;\r\n"],"sourceRoot":""}